10 Most Critical Functions in the Utterly System
=======================================


```

2. Metrics Calculation (calculateMetrics)
------------------------------------------
Location: src/app/api/workflows/[workflowId]/execute/route.ts

Purpose: Analyzes workflow execution results and calculates key performance metrics.

```typescript
function calculateMetrics(results: Result[]) {
  const questions = results.filter(r => r.type === 'question');
  const uniqueQuestions = Array.from(new Set(questions.map(q => q.question)));
  
  const accuracyByQuestion = uniqueQuestions.map(questionText => {
    const questionResults = questions.filter(q => q.question === questionText);
    const allResponses = questionResults.flatMap(q => q.response || []);
    // Calculate scores and consistency
    return {
      question: questionText,
      score: averageScore,
      utterances: allResponses.map(/*...*/),
      consistencyScore: calculateConsistency(allResponses)
    };
  });

  return {
    totalQuestions: uniqueQuestions.length,
    averageResponseQuality: /*...*/,
    consistencyScore: /*...*/
  };
}
```


4. Workflow Save Function (saveWorkflow)
------------------------------------------
Location: src/app/dashboard/workflow/WorkflowBuilder.tsx

Purpose: Saves or updates a workflow with its items and configuration.

```typescript
const saveWorkflow = async () => {
  if (!validateWorkflow()) return;
  
  const endpoint = `/api/projects/${projectId}/workflows`;
  const method = workflowId ? 'PUT' : 'POST';
  
  const response = await fetch(url, {
    method,
    body: JSON.stringify({
      name: workflowName,
      items: workflowItems,
      chatbotId: selectedApi
    })
  });
  // Handle response and update UI
};
```

5. Workflow Validation (validateWorkflow)
------------------------------------------
Location: src/app/dashboard/workflow/WorkflowBuilder.tsx

Purpose: Ensures workflow integrity before saving or execution.

```typescript
const validateWorkflow = () => {
  // Check for empty questions
  const hasEmptyQuestions = workflowItems.some(
    item => item.type === 'question' && (!item.content || !item.expectedAnswer)
  );
  
  // Check for invalid delays
  // Check for unvalidated intents
  // Verify end conversation node position
  
  return isValid;
};
```

6. Report Generation (GET /api/reports/[reportId])
------------------------------------------
Location: src/app/api/reports/[reportId]/route.ts

Purpose: Retrieves and formats workflow execution results.

```typescript
export async function GET(
  request: Request,
  { params }: { params: { reportId: string } }
) {
  // Get report from database
  // Format metrics and analysis
  return NextResponse.json({
    report: {
      overallScore,
      metrics,
      details,
      metadata
    }
  });
}
```

8. Consistency Calculation (calculateConsistency)
------------------------------------------
Location: src/app/api/workflows/[workflowId]/execute/route.ts

Purpose: Calculates response consistency across multiple utterances.

```typescript
function calculateConsistency(responses: QuestionResponse[]): number {
  if (responses.length <= 1) return 1;
  
  // Calculate variance in confidence scores
  const mean = responses.reduce((sum, r) => sum + r.confidence, 0) / responses.length;
  const variance = responses.reduce((sum, r) => 
    sum + Math.pow(r.confidence - mean, 2), 0
  ) / responses.length;
  
  return Math.max(0, 1 - Math.sqrt(variance));
}
```

10. Report Analysis Display (ReportPage)
------------------------------------------
Location: src/app/dashboard/workflow/[id]/results/page.tsx

Purpose: Visualizes and presents workflow execution results.

```typescript
export default function ReportPage() {
  const [report, setReport] = useState<Report | null>(null);
  
  // Fetch and display:
  // - Overall performance
  // - Question analysis
  // - Response metrics
  // - Consistency scores
  // - Recommendations
  
  return (
    <div>
      {/* Performance visualizations */}
      {/* Question analysis */}
      {/* Metrics and recommendations */}
    </div>
  );
}
```

Critical API Routes:
------------------
1. POST /api/workflows/[workflowId]/execute - Executes workflows
2. POST /api/validate-intent - Validates intents
3. GET /api/reports/[reportId] - Retrieves execution reports
4. POST /api/enhance - Enhances content
5. POST/PUT /api/projects/[projectId]/workflows - Saves workflows

These functions form the backbone of the workflow testing and validation system, handling everything from workflow creation and execution to result analysis and visualization. 