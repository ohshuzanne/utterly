// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  firstName       String
  lastName        String
  position        String?
  company         String?
  accountPurpose  String?
  experienceLevel String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  projects        Project[]
  chatbots        Chatbot[]
  accounts        Account[]
  sessions        Session[]
  teams           TeamMember[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  team        Team?    @relation(fields: [teamId], references: [id])
  teamId      String?
  workflows   Workflow[]
  reports     Report[]
}

model Chatbot {
  id          String     @id @default(cuid())
  name        String
  apiKey      String
  apiEndpoint String
  modelName   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  workflows   Workflow[]
}

model Workflow {
  id        String   @id @default(cuid())
  name      String
  items     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  chatbot   Chatbot  @relation(fields: [chatbotId], references: [id])
  chatbotId String
  reports   Report[]
}

model Report {
  id           String   @id @default(cuid())
  name         String
  overallScore Float
  metrics      Json
  details      Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  project      Project  @relation(fields: [projectId], references: [id])
  projectId    String
  workflow     Workflow @relation(fields: [workflowId], references: [id])
  workflowId   String
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  members     TeamMember[]
  projects    Project[]
  posts       TeamPost[]
}

model TeamPost {
  id        String       @id @default(cuid())
  content   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  author    TeamMember   @relation(fields: [authorId], references: [id])
  authorId  String
  team      Team         @relation(fields: [teamId], references: [id])
  teamId    String
  comments  TeamComment[]
}

model TeamComment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    TeamMember @relation(fields: [authorId], references: [id])
  authorId  String
  post      TeamPost  @relation(fields: [postId], references: [id])
  postId    String
}

model TeamMember {
  id        String   @id @default(cuid())
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  posts     TeamPost[]
  comments  TeamComment[]

  @@unique([userId, teamId])
}
