// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  firstName       String
  lastName        String
  position        String?
  company         String?
  accountPurpose  String?
  experienceLevel String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  projects        Project[]
  chatbots        Chatbot[]
  accounts        Account[]
  sessions        Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id                String    @id @default(cuid())
  name              String
  description       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  chatbotId         String?
  chatbot           Chatbot?  @relation(fields: [chatbotId], references: [id])
  workflows         Workflow[]
  reports           Report[]
}

model Chatbot {
  id                String    @id @default(cuid())
  name              String
  apiKey            String
  apiEndpoint       String
  modelName         String?
  temperature       Float?
  maxTokens         Int?
  topP              Float?
  frequencyPenalty  Float?
  presencePenalty   Float?
  stopSequences     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  projects          Project[]
  workflows         Workflow[]
}

model Workflow {
  id          String    @id @default(cuid())
  name        String
  items       Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  chatbotId   String
  chatbot     Chatbot   @relation(fields: [chatbotId], references: [id])
  reports     Report[]
}

model Report {
  id          String    @id @default(cuid())
  name        String
  overallScore Float
  metrics     Json
  details     Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  workflowId  String
  workflow    Workflow  @relation(fields: [workflowId], references: [id])
}

// You might also want to add these models later:
// - TestWorkflow (for combining multiple test cases)
// - CustomPrompts (for storing user-specific prompt templates)
// - AnalyticsConfig (for storing user preferences on analytics)
