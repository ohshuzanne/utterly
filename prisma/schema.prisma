// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id // This will be the Clerk User ID
  email           String    @unique
  firstName       String?
  lastName        String?
  position        String?   // Job Title
  company         String?
  accountPurpose  String?   // What are you using this account for?
  experienceLevel String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  chatbots        Chatbot[]
}

model Chatbot {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  apiEndpoint String
  apiKey      String // Encrypted
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  testCases   TestCase[]
  testResults TestResult[]
}

model TestCase {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  questions   Json     // Array of questions and expected answers
  chatbot     Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId   String
  results     TestResult[]
}

model TestResult {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  testCase     TestCase  @relation(fields: [testCaseId], references: [id])
  testCaseId   String
  chatbot      Chatbot   @relation(fields: [chatbotId], references: [id])
  chatbotId    String
  results      Json      // Detailed test results including accuracy scores
  status       String    // SUCCESS, FAILED, ERROR
}

// You might also want to add these models later:
// - TestWorkflow (for combining multiple test cases)
// - CustomPrompts (for storing user-specific prompt templates)
// - AnalyticsConfig (for storing user preferences on analytics)
